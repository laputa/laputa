## DEV mode
debug = false

## Semi-colon separated
date.pattern = "EEE, dd MMM yyyy HH:mm:ss ZZ; yyyy-MM-dd; yyyyMMdd; yyyy-MM-dd HH:mm:ss; dd/mm/yyyy"

## Charset
charset = "UTF-8"

upload {
  ## By which url the uploaded files will be served
  uri = "/files"

  ## Where the uploaded files will be stored
  dir = ${app.root}"/files"
}


## URLs that server static contents, such as js, css and images. Comma separated.
## Request starts with `uri`, will be looked up in `path`.
urls.static.default.mappings = [
  {"uri": "/ico", "path": "classpath:/theme/ico"},
  {"uri": "/favicon.ico", "path": "classpath:/theme/ico/favicon.ico"},
  {"uri": "/js", "path": "classpath:/theme/js"},
  {"uri": "/css", "path": "classpath:/theme/css"},
  {"uri": "/fonts", "path": "classpath:/theme/fonts"},
  {"uri": "/font-awesome", "path": "classpath:/theme/font-awesome"},
  {"uri": "/images", "path": "classpath:/theme/images"},
  {"uri": "/webjars", "path": "classpath:/META-INF/resources/webjars"},
  {"uri": ${upload.uri}, "path": ${upload.dir}}
]

## User defined extra mappings
//urls.static.mappings = [
//  {"uri": "/webjar", "path": "classpath:/META-INF/resources/webjars"}
//]

## Static file expires header in seconds (default 2 hours)
static.file.cache = 7200

server {
  ## use native epoll, only supports Linux x86_64
  // epoll = false

  // http.port = 7000
  // https {
  //   port = 7443
  //   privateKey = "ssl/private.key"
  //   certificate = "ssl/certificate.crt"
  // }

  ## Cross Origin Resource Sharing
  // cors.allows {
  //   origins = ["*"] ## allowing any origin
  //   origins = ["http://domain1.com:8080", "http://domain2.com:8081"] ## allowing specific origins
  //   credentials = false
  // }

  ## websocket path
  websocket.path = /websocket

  ## Allowed requests per second
  // throttle = 1000

  ## If the post data exceeds this size (in byte), will be wrote to disk. (default 32 KB)
  ## Too many disk operations would slow down the server.
  postData.useDisk.threshold = 32768
}
